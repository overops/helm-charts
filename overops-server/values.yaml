# Default values for overops-server.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# Overops Config settings
overops:
  defaultUser: "user@overops.com"
  defaultUserFirst: "Overops"
  defaultUserLast: "user"
  defaultUserPass: ""
  defaultUserServiceKey: ""

  loglevel: INFO
  frontendURL: "http://overops.127.0.0.1.nip.io:9191/"
  catalinaOpts:
  takipiHost: ""

  auth:
    existingSecret: ""

  redis:
    enabled: false
    host: ''
    port: 6379

  rabbitQueue:
    enabled: false
    service: ""
    port: 5672
    username: overops
    password: ""
    exchange: overops

  # Enable Overops Agent to run Overops on Overops
  agentSidecar:
    enabled: false
    useDebug: false
    repository: overops/agent-sidecar
    pullPolicy: IfNotPresent
    tag: latest
    collectorURL: ""
    applicationName: ""
    deploymentName: ""
    serverName: ""
    environmentName: ""

    # Extended Agent settings using a Property File
    # Note: This will set the TAKIPI_PROPERTIES_FILE using a configmap
    agentProperties: ""
    # Example:
    # agentProperties: |-
    #   takipi.max.depth=10
    #   takipi.shutdown.gracetime=60

replicaCount: 1
image:
  repository: overops/server
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

podAnnotations: {}
podSecurityContext: {}
  #runAsNonRoot: true
  #runAsUser: 1000
  #runAsGroup: 1000
securityContext: {}

# Database Section
externalDatabase:
  enabled: false
  type: "mysql"
  url: ""
  host: ""
  port: ""
  dbUser: ""
  dbPassword: ""

mysql:
  enabled: true

  mysqlUser: overops
  mysqlPassword: ""
  mysqlRootPassword:
  service:
    port: 3306
  initializationFiles:
    initdb.sql: |-
      use sys;

      GRANT ALL PRIVILEGES ON * . * TO 'overops'@'%';
      FLUSH PRIVILEGES;

      CREATE DATABASE IF NOT EXISTS dynalite;
      CREATE DATABASE IF NOT EXISTS pds;
      CREATE DATABASE IF NOT EXISTS qsql;
      CREATE DATABASE IF NOT EXISTS takipi;
      CREATE DATABASE IF NOT EXISTS overops;
      CREATE DATABASE IF NOT EXISTS overops_next;

postgresql:
  enabled: false
  postgresqlUsername: overops
  postgresqlPassword: ""
  service:
    port: 5432
  image:
    tag: 11.10.0-debian-10-r24
  initdbScripts:
    initdb.sql: |-
      CREATE DATABASE dynalite;
      ALTER DATABASE dynalite OWNER to overops;
      GRANT ALL PRIVILEGES ON DATABASE dynalite TO overops;
      CREATE DATABASE pds;
      ALTER DATABASE pds OWNER to overops;
      GRANT ALL PRIVILEGES ON DATABASE pds TO overops;

      CREATE DATABASE qsql;
      ALTER DATABASE qsql OWNER to overops;
      GRANT ALL PRIVILEGES ON DATABASE qsql TO overops;
      CREATE DATABASE takipi;
      ALTER DATABASE takipi OWNER to overops;
      GRANT ALL PRIVILEGES ON DATABASE takipi TO overops;

      CREATE DATABASE overops;
      ALTER DATABASE overops OWNER to overops;
      GRANT ALL PRIVILEGES ON DATABASE overops TO overops;

      CREATE DATABASE overops_next;
      ALTER DATABASE overops_next OWNER to overops;
      GRANT ALL PRIVILEGES ON DATABASE overops_next TO overops;


# Networking
service:
  type: ClusterIP
  port: 9191

ingress:
  enabled: false
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: overops.local
      paths: []
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

livenessProbe:
  enabled: true
  periodSeconds: 10
  failureThreshold: 3
  successThreshold: 1
  timeoutSeconds: 1

startupProbe:
  enabled: true
  initialDelaySeconds: 40
  periodSeconds: 10
  failureThreshold: 10
  successThreshold: 1
  timeoutSeconds: 1

readinessProbe:
  enabled: true
  initialDelaySeconds: 35
  periodSeconds: 5
  failureThreshold: 3
  successThreshold: 1
  timeoutSeconds: 1

resources: {}
#  requests:
#    cpu: "500m"
#    memory: "4Gi"

## Persist data to a persistent volume
persistence:
  enabled: false
  ## database data Persistent Volume Storage Class
  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
  ##   GKE, AWS & OpenStack)
  ##
  # storageClass: "-"
  accessMode: ReadWriteOnce
  size: 20Gi
  annotations: {}

autoscaling:
  enabled: false

nodeSelector: {}

tolerations: []

affinity: {}


## Overops Extended Configuration section populates config files that will be part of
#  overops server configMap. These will be mounted to the overops-private volume mount.
config:
  enableExtraAppConfig: false
  applicationProperties: ""
  # Example tuning hikari settings.
  # applicationProperties: |-
  #   spring.datasource.hikari.maximumPoolSize=50
  #   spring.datasource.hikari.connectionTimeout=60000

  enableExtraConfig: false
  myServerProperties: ""
  # Additional properties to add to the my.server.properties file.
  # myServerProperties: |-
  #   GRAFANA_DASHBOARD_ENABLED: true

  extraConfigurationFiles: ""
  ## Additional files that can be added to the overops op server as shown below for an example
  # extraConfigurationFiles:
  #   smtp.properties: |-
  #     SMTP_SERVER_USERNAME=
  #     SMTP_SERVER_PASSWORD=
  #     SMTP_FROM_ADDRESS=
  #   smtpserver.properties: |-
  #     mail.store.protocol=imap


serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# Default values for overops-server.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# Overops Config settings
overops:
  # Enables a Default User to be created at deployment
  defaultUserEnabled: true
  # Default Username to be pre-populated. This should be an email address
  defaultUser: "user@overops.com"
  # Default User first name to be pre-populated.
  defaultUserFirst: "Overops"
  # Default User last name to be pre-populated.
  defaultUserLast: "user"
  # Default User's Password to be pre-populated.
  defaultUserPass: ""
  # Default Service Key for the pre-populated key.
  defaultUserServiceKey: ""

  # overops-server frontend url ENV variable setting.
  frontendURL: "http://overops.127.0.0.1.nip.io:8080/"
  # overops-server CATALINA_OPTS ENV variable setting for tomcat server.
  catalinaOpts:
  # overops-server TAKIPI_HOST property (Used for external collectors)
  takipiHost: ""

auth:
  # Name of an existing secret which holds the following sensitive key/values:
  #  dbPassword   (external-db-password)
  #  defaultUserPass
  #  defaultUserServiceKey
  # Note: If not set a secret is created by the helm chart.
  existingSecret: ""

replicaCount: 1
image:
  repository: overops/server
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

podAnnotations: {}

# Standard Pod Security Context to match the OverOps Image
podSecurityContext:
  runAsNonRoot: true
  runAsUser: 1000
  runAsGroup: 1000
  fsGroup: 1000
securityContext: {}

# Database Section
#  Note: Use only one of the follow - External Database or Mysql or Postgres
externalDatabase:
  # Flag to use an external database and not one deployed by helm.
  enabled: false
  # External Database type used by overops server
  type: "mysql"
  # External Database URL used by overops server
  url: ""
  # External Database User used by overops server
  dbUser: ""
  # External Database Password used by overops server
  # Note: Use auth.existingSecret instead of passing a password.
  dbPassword: ""

# Mysql Database Section
mysql:
   # Enables the mysql dependency chart.
  enabled: false
  # Username of new database user to create.
  mysqlUser: "overops"
  # Password for the new user. Ignored if existing secret is provided.
  # If left blank, one will be generated
  mysqlPassword: ""
  # Password for the `root` user. Ignored if existing secret is provided
  # If left blank, one will be generated
  mysqlRootPassword:
  service:
    # Port mysql will use
    port: 3306
  # Script used on initial deployment, not required to be changed
  initializationFiles:
    initdb.sql: |-
      use sys;

      GRANT ALL PRIVILEGES ON * . * TO 'overops'@'%';
      FLUSH PRIVILEGES;

      CREATE DATABASE IF NOT EXISTS dynalite;
      CREATE DATABASE IF NOT EXISTS pds;
      CREATE DATABASE IF NOT EXISTS qsql;
      CREATE DATABASE IF NOT EXISTS takipi;

# Postgresql Database Section
postgresql:
  # Enables the postgresql dependency chart.
  enabled: true
  # Username of new database postgresql user to create.
  postgresqlUsername: overops
  # Password for the new postgresql database user. Random if not set.
  postgresqlPassword: ""
  service:
    # Port to be used
    port: 5432
  image:
    # Image tag to be used
    tag: 11.10.0-debian-10-r24
  initdbScripts:
    # Script used on initial deployment, not required to be changed
    initdb.sql: |-
      CREATE DATABASE dynalite;
      ALTER DATABASE dynalite OWNER to overops;
      GRANT ALL PRIVILEGES ON DATABASE dynalite TO overops;
      CREATE DATABASE pds;
      ALTER DATABASE pds OWNER to overops;
      GRANT ALL PRIVILEGES ON DATABASE pds TO overops;

      CREATE DATABASE qsql;
      ALTER DATABASE qsql OWNER to overops;
      GRANT ALL PRIVILEGES ON DATABASE qsql TO overops;
      CREATE DATABASE takipi;
      ALTER DATABASE takipi OWNER to overops;
      GRANT ALL PRIVILEGES ON DATABASE takipi TO overops;


# Networking
service:
  type: ClusterIP
  port: 8080

ingress:
  enabled: false
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: overops.local
      paths: []
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

# Standard Liveness Probe
livenessProbe:
  enabled: true
  periodSeconds: 10
  failureThreshold: 3
  successThreshold: 1
  timeoutSeconds: 1

# Standard Startup Probe
startupProbe:
  enabled: true
  initialDelaySeconds: 25
  periodSeconds: 5
  failureThreshold: 5
  successThreshold: 1
  timeoutSeconds: 1


resources: {}
#  requests:
#    cpu: "500m"
#    memory: "4Gi"

## Persist data to a persistent volume
persistence:
  enabled: true
  ## database data Persistent Volume Storage Class
  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
  ##   GKE, AWS & OpenStack)
  ##
  # storageClass: "-"
  accessMode: ReadWriteOnce
  size: 20Gi
  annotations: {}

  # Mount Paths used by the overops image.
  # Note: Do not change unless using a custom Docker Image and
  # require a different path!
  privateMountPath: /opt/private
  storageMountPath: /opt/takipi-server/storage

# Autoscaling is NOT supported for the backend
autoscaling:
  enabled: false

nodeSelector: {}
tolerations: []
affinity: {}


## Overops Extended Configuration section populates config files based on key values that will be part of
#  overops server configMap. These will be mounted to the overops-private volume mount.
config:
  enableExtraConfig: false

  # Additional properties to add to the my.server.properties file.
  myServerProperties: ''
  #myServerProperties: |-
   #GRAFANA_DASHBOARD_ENABLED=true

  ## Additional files that can be added to the overops op server as shown below for an example
  extraConfigurationFiles: {}
    #smtp.properties: |-
       #SMTP_SERVER_USERNAME=
       #SMTP_SERVER_PASSWORD=
       #SMTP_FROM_ADDRESS=
    #smtpserver.properties: |-
       #mail.transport.protocol=smtp


serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

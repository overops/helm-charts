apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "overops-server.fullname" . }}
  labels:
    {{- include "overops-server.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "overops-server.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "overops-server.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "overops-server.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}

      {{- if .Values.postgresql.enabled }}
      initContainers:  # check if DB is ready, and only continue when true
        - name: check-db-ready
          image: bitnami/postgresql:{{ .Values.postgresql.image.tag }}
          command: ['sh', '-c',  'until pg_isready -U {{ .Values.postgresql.postgresqlUsername | quote }} -h {{ template "postgresql.hostname" . }} -p {{ .Values.postgresql.service.port }};  do echo waiting for database; sleep 2; done;']          
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          env:
            - name: HOST_URL
              value: {{ include "overops-server.fullname" . }}
            - name: FRONTEND_URL
              value: {{ .Values.overops.frontendURL | quote }}

            {{ if .Values.mysql.enabled }}
            - name: DB_TYPE
              value: "mysql"
            - name: DB_SSL
              value: "--no-db-ssl"
            - name: DB_URL
              value: "{{ template "mysql.hostname" . }}:{{ .Values.mysql.service.port }}"
            - name: DB_USER
              value: {{ .Values.mysql.mysqlUser | quote }}
            - name: DB_PASS
              valueFrom:
                secretKeyRef:
                  name: {{ template "mysql.hostname" . }}
                  key: mysql-password
            {{ else if .Values.postgresql.enabled }}
            - name: DB_TYPE
              value: "postgresql"
            - name: DB_SSL
              value: "--no-db-ssl"
            - name: DB_URL
              value: "{{ template "postgresql.hostname" . }}:{{ .Values.postgresql.service.port }}"
            - name: DB_USER
              value: {{ .Values.postgresql.postgresqlUsername | quote }}
            - name: DB_PASS
              valueFrom:
                secretKeyRef:
                  name: {{ template "postgresql.hostname" . }}
                  key: postgresql-password
            {{ else if .Values.externalDatabase.enabled }}
            - name: DB_TYPE
              value: {{ .Values.externalDatabase.type | quote }}
            - name: DB_SSL
              value: "--no-db-ssl"
            - name: DB_URL
              value: {{ .Values.externalDatabase.url | quote }}
            - name: DB_USER
              value: {{ .Values.externalDatabase.dbUser | quote }}
            - name: DB_PASS
              valueFrom:
                secretKeyRef:
                  name: {{ include "overops-server.fullname" . }}
                  key: db-password             
            {{ end }}

          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            - mountPath: /opt/private
              name: overops-private
            - mountPath: /opt/takipi-server/storage
              name: overops-storage

          {{- if .Values.livenessProbe.enabled }}
          livenessProbe:
            httpGet:
              path: /service/png
              port: http
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
            successThreshold: {{ .Values.livenessProbe.successThreshold }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
          {{- end }}

         {{- if .Values.startupProbe.enabled }}
          startupProbe:
            httpGet:
              path: /service/png
              port: http
            initialDelaySeconds: {{ .Values.startupProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.startupProbe.periodSeconds }}
            failureThreshold: {{ .Values.startupProbe.failureThreshold }}
            successThreshold: {{ .Values.startupProbe.successThreshold }}
            timeoutSeconds: {{ .Values.startupProbe.timeoutSeconds }}
          {{- end }}

      volumes:
        - name: overops-storage
          persistentVolumeClaim:
            claimName: {{ template "overops-server.fullname" . }}
        - name: overops-private
          configMap:
            name: {{ template "overops-server.fullname" . }}-config
            items:
            - key: my.server.properties 
              path: my.server.properties
          

      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
